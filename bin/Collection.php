<?php

declare(strict_types=1);

namespace Rowbot\Idna\Bin;

use Closure;
use Generator;
use IteratorAggregate;
use RuntimeException;

use function array_filter;
use function array_map;
use function fclose;
use function fopen;
use function fwrite;
use function usort;
use function var_export;

/**
 * @template TValue
 * @implements \IteratorAggregate<int, TValue>
 */
class Collection implements IteratorAggregate
{
    /**
     * @var array<int, TValue>
     */
    private $data;

    /**
     * @param array<int, TValue> $data
     */
    public function __construct(array $data = [])
    {
        $this->data = $data;
    }

    /**
     * @return self<TValue>
     */
    public function map(Closure $callback): self
    {
        return new self(array_map($callback, $this->data, []));
    }

    /**
     * @return self<TValue>
     */
    public function filter(Closure $callback): self
    {
        return new self(array_values(array_filter($this->data, $callback)));
    }

    /**
     * @return \Generator<int, TValue>
     */
    public function getIterator(): Generator
    {
        foreach ($this->data as $i => $data) {
            yield $i => $data;
        }
    }

    /**
     * @return self<TValue>
     */
    public function sort(Closure $callback): self
    {
        $data = $this->data;

        if (!usort($data, $callback)) {
            throw new RuntimeException();
        }

        return new self($data);
    }

    public function writeTo(string $filename): void
    {
        $handle = fopen($filename, 'w');

        if ($handle === false) {
            throw new RuntimeException();
        }

        fwrite($handle, "<?php\n\n");
        fwrite($handle, "// This file was auto generated by running 'php bin/generateDataFiles.php'");
        fwrite($handle, "declare(strict_types=1);\n\nreturn ");
        fwrite($handle, var_export($this->data, true));
        fwrite($handle, ';');
        fclose($handle);
    }
}
